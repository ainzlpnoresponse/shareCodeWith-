#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Logbook {
    private:
        int logMonth; // Month for the logbook
        int logYear; // Year for the logbook
        int entries[31]; // Daily entries for the logbook
    public:
        Logbook(int month, int year); // Create a logbook for the specified year and month
        void putEntry(int day, int value); // Add the specified value into the existing entry for the specified day (ranges between 1 and the number of days in the year and month kept in this logbook)
        int getEntry(int day) const; // Return entry for day
        int getMonth() const; // Return the month
        int getYear() const; // Return the year
        int getDaysInMonth() const; // Number of days in month
        void displayCalendar() const; // Output the monthly entries in calendar form
        int operator [](int day) const; // Returns the logbook entry for the specified day
        void operator += (const Logbook &rightLogbook); // Adds logbooks cover the same month

    private:
        // Helper functions
        bool isLeapYear() const; // Check if the year is leap year
        int getDayOfWeek(int day) const; // On which day of the week the first day of the month occurs

};

int dayofweek(int, int, int);
string getMonthString(int month);
int main()
{
    Logbook coffee(1,2003);
    Logbook apple1(10,2020);
    Logbook apple2(10,2020);
    apple2.putEntry(1, 10);
    apple1.putEntry(1, 10);
    apple1+=apple2;
    apple1.displayCalendar();
    return 0;
}


Logbook::Logbook(int month, int year){
    logMonth = month;
    logYear = year;
    for(int i = 1; i < 32 ; i++){
        putEntry(i, 0);
    }
}
int Logbook::getDaysInMonth()const{
    int MonthDay[]={0,31,28,31,30,31,30,31,31,30,31,30,31};
    int y,m;
    y = getYear();
    if (isLeapYear())MonthDay[2]=29;
    if (m<1 || m >12)m=0;
    return MonthDay[getMonth()];

}
int Logbook::getMonth()const{
    return logMonth;
}
int Logbook::getYear()const{
    return logYear;
}
void Logbook::putEntry(int day, int value){

    entries[day-1] = value;

}
int Logbook::getEntry(int day)const{

    return entries[day-1];

}
int Logbook::operator [](int day) const{

    return entries[day-1];

}
void Logbook::displayCalendar() const{
    int i;
    //printf (" Calendar - %s %d \n\n", getMonthString(getMonth()),getYear());
    cout << "                        "<<getMonthString(getMonth()) << " " << getYear() << endl;

    //cout << setw(9) << "   Sun  Mon  Tue  Wed  Thu  Fri  Sat" << endl;
    for(int k = 0 ; k < getDayOfWeek(1) ; k++){
            cout << setw(9) << " ";
    }
    for(i = 1; i <= getDaysInMonth(); i++){

        cout << " "<<setw(3)<< i << " " <<setw(4)<< entries[i-1];
        if(getDayOfWeek(i) == 6){
            cout << endl;
        }

    }
}
void Logbook::operator += (const Logbook &rightLogbook){

    for(int i = 0; i < getDaysInMonth(); i++){
        entries[i] += rightLogbook[i+1];
    }
}
bool Logbook::isLeapYear() const{

    int y = getYear();
    if((y%4==0)&&(y%100!=0)||(y%400==0)){
        return true;
    }
    else{
        return false;
    }

}
int Logbook::getDayOfWeek(int day) const{

    return dayofweek(day, getMonth(), getYear());

}
int dayofweek(int d, int m, int y){

    static int t[] = { 0, 3, 2, 5, 0, 3,5, 1, 4, 6, 2, 4 };
    y -= m < 3;
    return ( y + y / 4 - y / 100 + y / 400 + t[m - 1] + d) % 7;
}
string getMonthString(int month){
    string months[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    return months[month-1];
}


