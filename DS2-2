#include <iostream>
#include <cstring>
#define SIZE 100

using namespace std;

typedef struct Node{
	int data;
	Node *link;
};

class Stack
{
public:
	int temp;
	int count = 0;
    Stack() {
    	top = NULL; //初始化
    	count = 0;
    }
    int push(int d)
    {
        if(count>=SIZE){  //overflow
            return -1;
        }
        else {
            Node *ptr=new Node();  
            ptr->data=d; //插入value到node的data 部分
            ptr->link=top; //讓node的link部分等於top 
            top=ptr; //讓ptr和top指向同一個地方
            count ++;
            return 1;
        }
    }
    int *pop()
    {
        if(top==NULL){
            return NULL; //代表stack is emty 如果失敗就回傳 NULL
        }
        else{
            Node *ptr=top; //讓top指向ptr指向的node
            top=top->link;   //把top pointer移到llinked list裡的下個元素
            temp = ptr->data; //把ptr指向的data給temp
			delete(ptr);  //把ptr指向的node刪掉
			count --; 
			return &temp; //回傳temp指向的data
        }
    }
private:
    Node *top;
};

int main()
{
    int data, *temp;
    char command[50];
    Stack *stack = new Stack();
    while(1)
    {
        cin>>command;
        if(strcmp(command, "exit") == 0)
        {
            break;
        }
        else if(strcmp(command, "push") == 0)
        {
            cout<<"Please input a integer data:";
            cin>>data;
            if(stack->push(data) == 1)
            {
                cout<<"Successfully push data "<<data<<" into stack.\n";
            }
            else
            {
                cout<<"Failed to push data into stack.\n";
            }
        }
        else if(strcmp(command, "pop") == 0)
        {
            temp = stack->pop();
            if(temp == NULL)
            {
                cout<<"Failed to pop a data from stack.\n";
            }
            else
            {
                cout<<"Pop data "<<*temp<<" from stack.\n"<<endl;
            }
        }
    }
}
